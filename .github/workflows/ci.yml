name: CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows MSVC",
              os: windows-latest,
              generator: "Ninja",
              cc: "cl",
              cxx: "cl"
            }
          - {
              name: "Ubuntu GCC",
              os: ubuntu-latest,
              generator: "Ninja",
              cc: "gcc-14",
              cxx: "g++-14"
            }
          - {
              name: "Ubuntu Clang",
              os: ubuntu-latest,
              generator: "Ninja", 
              cc: "clang-18",
              cxx: "clang++-18"
            }
          - {
              name: "macOS Clang",
              os: macos-latest,
              generator: "Ninja",
              cc: "clang",
              cxx: "clang++",
              min_clang_version: "17"
            }

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        if [[ "${{ matrix.config.cxx }}" == "g++-14" ]]; then
          sudo apt-get install -y gcc-14 g++-14
        elif [[ "${{ matrix.config.cxx }}" == "clang++-18" ]]; then
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y clang-18 clang++-18
        fi

    - name: Check macOS Clang version
      if: runner.os == 'macOS'
      id: clang_check
      shell: bash
      run: |
        # Check current Clang version
        clang_version=$(clang --version | head -n1 | grep -o '[0-9]\+\.[0-9]\+' | head -n1 | cut -d. -f1)
        echo "Current Clang version: $clang_version"
        echo "clang_version=$clang_version" >> $GITHUB_OUTPUT
        
        # Verify compilers exist
        echo "Checking compiler availability:"
        which clang || echo "clang not found"
        which clang++ || echo "clang++ not found"
        clang --version || echo "clang version check failed"
        clang++ --version || echo "clang++ version check failed"
        
        if [[ "${{ matrix.config.min_clang_version }}" != "" ]] && [[ $clang_version -lt ${{ matrix.config.min_clang_version }} ]]; then
          echo "Clang version $clang_version is less than required ${{ matrix.config.min_clang_version }}"
          echo "Skipping this build as it's not compatible with older Clang versions"
          echo "skip_build=true" >> $GITHUB_OUTPUT
        else
          echo "skip_build=false" >> $GITHUB_OUTPUT
        fi

    - name: Skip build notification
      if: runner.os == 'macOS' && steps.clang_check.outputs.skip_build == 'true'
      shell: bash
      run: |
        echo "::notice::Skipping macOS build due to incompatible Clang version (${{ steps.clang_check.outputs.clang_version }} < ${{ matrix.config.min_clang_version }})"

    - name: Setup MSVC
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Configure CMake
      if: steps.clang_check.outputs.skip_build != 'true'
      shell: bash
      run: |
        echo "Debug: Matrix config CC=${{ matrix.config.cc }}, CXX=${{ matrix.config.cxx }}"
        echo "Debug: Environment CC=$CC, CXX=$CXX"
        echo "Debug: OS=${{ runner.os }}"
        
        # For macOS, use absolute paths to ensure we get the right compiler
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          CC_PATH=$(which ${{ matrix.config.cc }})
          CXX_PATH=$(which ${{ matrix.config.cxx }})
          echo "Debug: macOS CC_PATH=$CC_PATH, CXX_PATH=$CXX_PATH"
          cmake -B ${{ github.workspace }}/build -G "${{ matrix.config.generator }}" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER="$CC_PATH" -DCMAKE_CXX_COMPILER="$CXX_PATH" -DOULY_BUILD_TESTS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        else
          cmake -B ${{ github.workspace }}/build -G "${{ matrix.config.generator }}" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DOULY_BUILD_TESTS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        fi
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}

    - name: Build
      if: steps.clang_check.outputs.skip_build != 'true'
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} --parallel
      shell: bash

    - name: Test
      if: steps.clang_check.outputs.skip_build != 'true'
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure --parallel
      shell: bash

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-14 g++-14 lcov

    - name: Configure CMake with coverage
      shell: bash
      run: |
        cmake -B ${{ github.workspace }}/build -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14 -DOULY_BUILD_TESTS=ON -DOULY_TEST_COVERAGE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      env:
        CC: gcc-14
        CXX: g++-14

    - name: Build with coverage
      shell: bash
      run: cmake --build ${{ github.workspace }}/build --config Debug --parallel

    - name: Run tests
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: ctest -C Debug --output-on-failure --parallel

    - name: Generate coverage report
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: |
        lcov --gcov-tool gcov-14 --capture --directory . --base-directory ${{ github.workspace }} --output-file coverage.info --no-external --ignore-errors mismatch
        lcov --remove coverage.info '/usr/*' '*/_deps/*' '*/catch2-src/*' --output-file coverage.info --ignore-errors unused

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ${{ github.workspace }}/build/coverage.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Doxygen
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Install Python dependencies
      working-directory: ${{ github.workspace }}/docs
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build documentation
      working-directory: ${{ github.workspace }}/docs
      shell: bash
      run: make html

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
