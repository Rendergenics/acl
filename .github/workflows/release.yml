name: Release

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-artifacts:
    name: Build Release Artifacts
    needs: create-release
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              name: "Windows",
              os: windows-latest,
              generator: "Ninja",
              cc: "cl",
              cxx: "cl",
              artifact: "ouly-windows.zip"
            }
          - {
              name: "Ubuntu",
              os: ubuntu-latest,
              generator: "Ninja",
              cc: "gcc-14",
              cxx: "g++-14",
              artifact: "ouly-linux.zip"
            }
          - {
              name: "macOS",
              os: macos-latest,
              generator: "Ninja",
              cc: "clang",
              cxx: "clang++",
              artifact: "ouly-macos.zip",
              min_clang_version: "17"
            }

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-14 g++-14

    - name: Check macOS Clang version
      if: runner.os == 'macOS'
      id: clang_check
      run: |
        # Check current Clang version
        clang_version=$(clang --version | head -n1 | grep -o '[0-9]\+\.[0-9]\+' | head -n1 | cut -d. -f1)
        echo "Current Clang version: $clang_version"
        echo "clang_version=$clang_version" >> $GITHUB_OUTPUT
        
        if [[ "${{ matrix.config.min_clang_version }}" != "" ]] && [[ $clang_version -lt ${{ matrix.config.min_clang_version }} ]]; then
          echo "Clang version $clang_version is less than required ${{ matrix.config.min_clang_version }}"
          echo "Skipping this build as it's not compatible with older Clang versions"
          echo "skip_build=true" >> $GITHUB_OUTPUT
        else
          echo "skip_build=false" >> $GITHUB_OUTPUT
        fi

    - name: Skip build notification
      if: runner.os == 'macOS' && steps.clang_check.outputs.skip_build == 'true'
      run: |
        echo "::notice::Skipping macOS build due to incompatible Clang version (${{ steps.clang_check.outputs.clang_version }} < ${{ matrix.config.min_clang_version }})"

    - name: Setup MSVC
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Configure CMake
      if: steps.clang_check.outputs.skip_build != 'true'
      run: |
        cmake -B ${{ github.workspace }}/build \
              -G "${{ matrix.config.generator }}" \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
              -DOULY_BUILD_TESTS=OFF \
              -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}

    - name: Build
      if: steps.clang_check.outputs.skip_build != 'true'
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Install
      if: steps.clang_check.outputs.skip_build != 'true'
      run: cmake --install ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Package
      if: steps.clang_check.outputs.skip_build != 'true'
      run: |
        cd ${{ github.workspace }}/install
        zip -r ../${{ matrix.config.artifact }} .

    - name: Upload Release Asset
      if: steps.clang_check.outputs.skip_build != 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/zip
