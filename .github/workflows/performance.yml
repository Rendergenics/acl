name: Performance Benchmarks

on:
  workflow_dispatch:
    inputs:
      benchmark_type:
        description: 'Type of benchmark to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - scheduler
        - allocator

env:
  BUILD_TYPE: Release
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  dedicated-benchmarks:
    name: Dedicated Performance Testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc-14, clang-18]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up compiler
      run: |
        sudo apt-get update
        if [[ "${{ matrix.compiler }}" == "gcc-14" ]]; then
          sudo apt-get install -y gcc-14 g++-14
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
        elif [[ "${{ matrix.compiler }}" == "clang-18" ]]; then
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y clang-18 clang++-18
          echo "CC=clang-18" >> $GITHUB_ENV
          echo "CXX=clang++-18" >> $GITHUB_ENV
        fi
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -DOULY_BUILD_TESTS=ON
    
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} -j$(nproc)
    
    - name: Run Extended Performance Benchmarks
      working-directory: build/unit_tests
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
      run: |
        echo "🚀 Running extended performance benchmarks..."
        
        # Run comprehensive scheduler comparison benchmarks
        if [[ "${{ github.event.inputs.benchmark_type }}" == "all" || "${{ github.event.inputs.benchmark_type }}" == "scheduler" ]]; then
          echo "📊 Running comprehensive scheduler benchmarks..."
          if [ -f "./bench_scheduler_comparison" ]; then
            ./bench_scheduler_comparison
          else
            echo "⚠️ Scheduler benchmark executable not found"
          fi
        fi
        
        # Run allocator benchmarks if available
        if [[ "${{ github.event.inputs.benchmark_type }}" == "all" || "${{ github.event.inputs.benchmark_type }}" == "allocator" ]]; then
          echo "🔄 Running allocator benchmarks..."
          if [ -f "./bench_allocators" ]; then
            ./bench_allocators
          else
            echo "⚠️ Allocator benchmark executable not found"
          fi
        fi
        
        echo "✅ Extended benchmarks completed"
        echo "Generated files:"
        ls -la *.json *.txt 2>/dev/null || echo "No result files found"
        
    - name: Upload extended benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: extended-benchmark-results-${{ matrix.compiler }}-${{ github.run_number }}
        path: |
          build/unit_tests/*.json
          build/unit_tests/*.txt
        retention-days: 90

  update-performance-tracking:
    name: Update Performance Tracking
    runs-on: ubuntu-latest
    needs: dedicated-benchmarks
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all extended benchmark results
      uses: actions/download-artifact@v4
      with:
        path: extended-benchmark-artifacts
        pattern: extended-benchmark-results-*
        merge-multiple: true

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install matplotlib pandas numpy

    - name: Checkout performance tracking branch
      run: |
        git fetch origin performance-tracking || echo "No existing performance-tracking branch"
        git checkout performance-tracking || git checkout --orphan performance-tracking

    - name: Process extended benchmark results
      run: |
        echo "🔄 Processing extended benchmark results..."
        
        # Ensure directory structure exists
        mkdir -p results scripts
        
        # Copy scripts from main branch
        git checkout main -- scripts/ || echo "No scripts directory in main branch"
        chmod +x scripts/*.py 2>/dev/null || echo "No Python scripts to make executable"
        
        # Copy extended benchmark results
        if [ -d "../extended-benchmark-artifacts" ]; then
          COLLECTED_FILES=$(find ../extended-benchmark-artifacts -name "*.json" -o -name "*.txt" | wc -l)
          echo "Found $COLLECTED_FILES extended benchmark files"
          
          if [ $COLLECTED_FILES -gt 0 ]; then
            cp ../extended-benchmark-artifacts/*.json results/ 2>/dev/null || echo "No JSON files to copy"
            cp ../extended-benchmark-artifacts/*.txt results/ 2>/dev/null || echo "No TXT files to copy"
            echo "✅ Copied extended benchmark files to results directory"
          fi
        fi

    - name: Cleanup old results
      run: |
        if [ -f "scripts/cleanup_old_results.py" ]; then
          echo "🧹 Cleaning up old results (keeping last 20 builds)..."
          python3 scripts/cleanup_old_results.py results --keep 20
        fi

    - name: Generate comprehensive performance report
      run: |
        if [ -f "scripts/visualize_performance.py" ]; then
          echo "📊 Generating comprehensive performance visualizations..."
          python3 scripts/visualize_performance.py results -o . -v
        else
          echo "⚠️ Visualization script not found"
          echo "# OULY Performance Report (Extended)" > PERFORMANCE.md
          echo "**Generated:** $(date)" >> PERFORMANCE.md
          echo "**Type:** Extended/Dedicated Benchmarks" >> PERFORMANCE.md
        fi

    - name: Commit extended results
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add .
        
        if ! git diff --staged --quiet; then
          RESULT_COUNT=$(find results -name "*.json" -o -name "*.txt" | wc -l)
          
          git commit -m "📊 Extended performance results (scheduled run)
          
          Commit: ${{ github.sha }}
          Type: Extended/Dedicated benchmarks
          Total result files: $RESULT_COUNT
          Generated: $(date)"
          
          git push origin performance-tracking
          echo "✅ Extended results committed to performance-tracking branch"
        else
          echo "No new extended results to commit"
        fi
