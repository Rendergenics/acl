name: Performance Benchmarks

on:
  workflow_dispatch:
    inputs:
      benchmark_type:
        description: 'Type of benchmark to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - scheduler
        - allocator
  schedule:
    # Run performance benchmarks daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [ main ]
    types: 
      - completed

env:
  BUILD_TYPE: Release
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  dedicated-benchmarks:
    name: Performance Testing (${{ matrix.os }}-${{ matrix.compiler }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: 
          - name: gcc-14
            cc: gcc-14
            cxx: g++-14
            id: gcc-14
          - name: clang-18
            cc: clang-18
            cxx: clang++-18
            id: clang-18
        exclude:
          # GCC not available on macOS runners
          - os: macos-latest
            compiler: { name: gcc-14 }
        include:
          # Add clang-15 for macOS (default Xcode version)
          - os: macos-latest
            compiler:
              name: clang-15
              cc: clang
              cxx: clang++
              id: clang-15
              
    runs-on: ${{ matrix.os }}
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up compiler (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        if [[ "${{ matrix.compiler.name }}" == "gcc-14" ]]; then
          sudo apt-get install -y gcc-14 g++-14
        elif [[ "${{ matrix.compiler.name }}" == "clang-18" ]]; then
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y clang-18 clang++-18
        fi
        echo "CC=${{ matrix.compiler.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.compiler.cxx }}" >> $GITHUB_ENV
        echo "COMPILER_ID=${{ matrix.compiler.id }}" >> $GITHUB_ENV

    - name: Set up compiler (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "CC=${{ matrix.compiler.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.compiler.cxx }}" >> $GITHUB_ENV
        echo "COMPILER_ID=${{ matrix.compiler.id }}" >> $GITHUB_ENV
    
    - name: Configure CMake (Release build without ASAN)
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -DOULY_BUILD_TESTS=ON \
          -DOULY_ASAN_ENABLED=OFF
    
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel
    
    - name: Run Extended Performance Benchmarks
      working-directory: build/unit_tests
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        COMPILER_ID: ${{ env.COMPILER_ID }}
      run: |
        echo "🚀 Running extended performance benchmarks..."
        echo "Environment: COMPILER_ID=$COMPILER_ID, BUILD_NUMBER=$GITHUB_RUN_NUMBER"
        
        # Default benchmark type for scheduled/push events
        BENCHMARK_TYPE="${{ github.event.inputs.benchmark_type || 'all' }}"
        
        # Run comprehensive scheduler comparison benchmarks
        if [[ "$BENCHMARK_TYPE" == "all" || "$BENCHMARK_TYPE" == "scheduler" ]]; then
          echo "📊 Running comprehensive scheduler benchmarks..."
          if [ -f "./bench_scheduler_comparison" ]; then
            ./bench_scheduler_comparison
          else
            echo "⚠️ Scheduler benchmark executable not found"
          fi
        fi
        
        # Run general performance benchmarks
        if [[ "$BENCHMARK_TYPE" == "all" || "$BENCHMARK_TYPE" == "allocator" ]]; then
          echo "🔄 Running general performance benchmarks..."
          if [ -f "./bench_performance" ]; then
            ./bench_performance
          else
            echo "⚠️ General performance benchmark executable not found"
          fi
        fi
        
        echo "✅ Extended benchmarks completed"
        echo "Generated files:"
        ls -la *.json *.txt 2>/dev/null || echo "No result files found"
        
    - name: Upload extended benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: extended-benchmark-results-${{ matrix.os }}-${{ matrix.compiler.id }}-${{ github.run_number }}
        path: |
          build/unit_tests/*.json
          build/unit_tests/*.txt
        retention-days: 90

  update-perfo:
    name: Update Performance Tracking
    runs-on: ubuntu-latest
    needs: dedicated-benchmarks
    if: always() && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'))
    
    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all extended benchmark results
      uses: actions/download-artifact@v4
      with:
        path: extended-benchmark-artifacts
        pattern: extended-benchmark-results-*
        merge-multiple: true

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install matplotlib pandas numpy

    - name: Checkout performance tracking branch
      run: |
        git fetch origin perfo || echo "No existing perfo branch"
        git checkout perfo || git checkout --orphan perfo

    - name: Process extended benchmark results
      run: |
        echo "🔄 Processing extended benchmark results..."
        
        # Ensure directory structure exists
        mkdir -p results scripts
        
        # Copy scripts from main branch
        git checkout main -- scripts/ || echo "No scripts directory in main branch"
        chmod +x scripts/*.py 2>/dev/null || echo "No Python scripts to make executable"
        
        # Copy extended benchmark results
        if [ -d "../extended-benchmark-artifacts" ]; then
          COLLECTED_FILES=$(find ../extended-benchmark-artifacts -name "*.json" -o -name "*.txt" | wc -l)
          echo "Found $COLLECTED_FILES extended benchmark files"
          
          if [ $COLLECTED_FILES -gt 0 ]; then
            cp ../extended-benchmark-artifacts/*.json results/ 2>/dev/null || echo "No JSON files to copy"
            cp ../extended-benchmark-artifacts/*.txt results/ 2>/dev/null || echo "No TXT files to copy"
            echo "✅ Copied extended benchmark files to results directory"
          fi
        fi

    - name: Cleanup old results
      run: |
        if [ -f "scripts/cleanup_old_results.py" ]; then
          echo "🧹 Cleaning up old results (keeping last 20 builds)..."
          python3 scripts/cleanup_old_results.py results --keep 20
        fi

    - name: Generate comprehensive performance report
      run: |
        if [ -f "scripts/visualize_performance.py" ]; then
          echo "📊 Generating comprehensive performance visualizations..."
          python3 scripts/visualize_performance.py results -o . -v
        else
          echo "⚠️ Visualization script not found"
          echo "# OULY Performance Report (Extended)" > PERFORMANCE.md
          echo "**Generated:** $(date)" >> PERFORMANCE.md
          echo "**Type:** Extended/Dedicated Benchmarks" >> PERFORMANCE.md
        fi

    - name: Commit extended results
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add .
        
        if ! git diff --staged --quiet; then
          RESULT_COUNT=$(find results -name "*.json" -o -name "*.txt" | wc -l)
          
          git commit -m "📊 Extended performance results (scheduled run)
          
          Commit: ${{ github.sha }}
          Type: Extended/Dedicated benchmarks
          Total result files: $RESULT_COUNT
          Generated: $(date)"
          
          git push origin perfo
          echo "✅ Extended results committed to perfo branch"
        else
          echo "No new extended results to commit"
        fi
